Approach-1(Using Brute Force)
T.C.-O(N^3)
S.C.-O(
class Solution{   
public:
    long long maxProduct(int arr[], int n) {
        // code here
        
        
        int res=INT_MIN;
        
        for(int i=0;i<n-2;i++)
        {
            for(int j=i+1;j<n-1;j++)
            {
                for(int k=j+1;k<n;k++)
                {
                    res=max(res,arr[i]*arr[j]*arr[k]);
                }
            }
        }
        return res;
    }
};

Approach-2(Using Sorting)

T.C-O(NLOGN)
S.C-O(1)


class Solution{   
public:
    long long maxProduct(int arr[], int n) {
        // code here
        if(n<=2)
        return -1;
        
        sort(arr,arr+n);
        
        return max(arr[0]*arr[1]*arr[n-1],arr[n-1]*arr[n-2]*arr[n-3]);
        
    }
};

Approach-3(Effecient Aproach)

class Solution{   
public:
    long long maxProduct(int arr[], int n) {
      
        long long maxA = INT_MIN, maxB = INT_MIN, maxC = INT_MIN;

      
        long long minA = INT_MAX, minB = INT_MAX;

        for (int i = 0; i < n; i++) {
            
            if (arr[i] > maxA) {
                maxC = maxB;
                maxB = maxA;
                maxA = arr[i];
            }

            
            else if (arr[i] > maxB) {
                maxC = maxB;
                maxB = arr[i];
            }

           
            else if (arr[i] > maxC)
                maxC = arr[i];

            
            if (arr[i] < minA) {
                minB = minA;
                minA = arr[i];
            }

           
            else if (arr[i] < minB)
                minB = arr[i];
        }
        return max(minA * minB * maxA, maxA * maxB * maxC);
    }
    };

