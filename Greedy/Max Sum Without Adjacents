Approach- 1(Greedy Solution)
T.C-O(N)
S.C-O(1)

class Solution{
public:	
	// calculate the maximum sum with out adjacent
	int findMaxSum(int *arr, int n) {
	    // code here
	    int include=arr[0];
	    int exclude=0;
	    
	    int maximum;
	    
	    for(int i=1;i<n;i++)
	    {
	        maximum=max(include,exclude);
	        include=exclude+arr[i];
	        exclude=maxium;
	    }
	    return max(include,exclude);
	    }
};

Approach-2(Dynamic Programming)
T.C-O(N)
S.C-O(N)

class Solution{
public:	
	// calculate the maximum sum with out adjacent
	int findMaxSum(int *arr, int n) {
	    // code here
	    int dp[n];
	    
	    if(n==0)
	    return 0;
	    
	    if(n==1)
	    return arr[0];
	    
	    if(n==2)
	    return max(arr[0],arr[1]);
	    
	    dp[0]=arr[0];
	    dp[1]=max(arr[0],arr[1]);
	    
	    for(int i=2;i<n;i++)
	    {
	       dp[i]=max(dp[i-2]+arr[i],dp[i-1]);
	    }
	    return dp[n-1];
	    
	    
	}
};
